
----- Results for example Ch10_01 -----

----- Ch10_01_ex1() -----

vec1:
   10   20   30  -10   40   50   80   10   50  -60   10   80
  -90   10   80   90   60  120   90   80   60   10  -20  -70

count10: 5
count70: 0

mset1:
  -90  -70  -60  -20  -10   10   10   10   10   10   20   30
   40   50   50   60   60   80   80   80   80   90   90  120

count40: 1
count80: 2

----- Ch10_01_ex2() -----

deq1:
   10   20   30  -10   40   50   80   10   50  -60   10   80
  -90   10   80   90   60  120   90   80   60   10  -20  -70

num_neg: 5
num_div30: 8

----- Ch10_01_ex3() -----

vec1:
[Alanine         A|Ala| 89.094|NP]  [Arginine        R|Arg|174.203|B ]  
[Asparagine      N|Asn|132.119|UP]  [AsparticAcid    D|Asp|133.104|A ]  
[Cysteine        C|Cys|121.154|NP]  [Glutamine       Q|Gln|146.146|UP]  
[GlutamicAcid    E|Glu|147.131|A ]  [Glycine         G|Gly| 75.067|NP]  
[Histidine       H|His|155.156|B ]  [IsoLeucine      I|Ile|131.175|NP]  
[Leucine         L|Leu|131.175|NP]  [Lysine          K|Lys|146.189|B ]  
[Methionine      M|Met|149.208|NP]  [Phenylalanine   F|Phe|165.192|NP]  
[Proline         P|Pro|115.132|NP]  [Serine          S|Ser|105.093|UP]  
[Threonine       T|Thr|119.119|UP]  [Tryptophan      W|Trp|204.228|NP]  
[Tyrosine        Y|Tyr|181.191|UP]  [Valine          V|Val|117.148|NP]  

MolMass >= 75.00)
b_any_of:  true
b_all_of:  true
b_none_of: false

MolMass >= 150.00)
b_any_of:  true
b_all_of:  false
b_none_of: false

MolMass >= 250.00)
b_any_of:  false
b_all_of:  false
b_none_of: true

----- Results for example Ch10_02 -----

----- Ch10_02_ex1() -----

vec1:
  375.0   797.0   951.0   184.0   732.0   780.0   599.0   597.0   157.0   446.0 
  156.0   100.0    59.0   460.0   867.0   334.0   602.0   143.0   709.0   651.0 

*iter_min1: 59.0
*iter_max1: 951.0

*iter_min2: 59.0
*iter_max2: 951.0

*iter_min3: 59.0
*iter_max3: 951.0

*iter_min4: 59.0
*iter_max4: 951.0

----- Ch10_02_ex2() -----

Name                EnKj      EnKcal      Carbs        Fat     Protein
========================================================================
[Almond              2423        579      21.60      49.90      21.20]
[Cashew               553        132      30.19      43.85      18.22]
[Chesnut              820        196      28.00       1.30       1.60]
[Hazelnut            2629        628      16.70      60.75      15.95]
[Pecan               2889        690      13.86      71.97       9.17]
[Pistachio           2351        562      27.51      45.39      20.27]
[Walnut              2738        654      13.71      65.21      15.23]

minmax_element using operator<
result1.min: Almond
result1.max: Walnut

minmax_element using cmp_fat
result2_min: Chesnut = 1.3000
result2_max: Pecan = 71.9700

minmax_element using cmp_protein
result3_min: Chesnut = 1.6000
result3_max: Almond = 21.2000

----- Ch10_02_ex3() -----

vec1:
  375.0   797.0   951.0   184.0   732.0   780.0   599.0   597.0   157.0   446.0 
  156.0   100.0    59.0   460.0   867.0   334.0   602.0   143.0   709.0   651.0 

min1: 59.0
max1: 951.0

result.min: 59.0
result.max: 951.0

----- Results for example Ch10_03 -----

----- Ch10_03_ex1() -----

arr1: 10 20 30 40 50 60 70 80 90 100 

vec1: 10 20 30 40 50 60 70 80 90 100 

vec2: -10 0 10 20 30 40 50 60 70 80 90 100 

vec3: -10.0 0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0 

vec4: -10.0 0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0 

----- Ch10_03_ex2() -----

vec1 (orginal values):
[(0, 0, 640, 480) 307200] [(0, 0, 800, 600) 480000] 
[(0, 0, 1024, 768) 786432] [(0, 0, 1280, 1024) 1310720] 
[(0, 0, 1600, 1200) 1920000] [(0, 0, 1920, 1080) 2073600] 
[(0, 0, 3840, 2160) 8294400] [(0, 0, 7680, 4320) 33177600] 

vec2 (after copy_if):
[(0, 0, 1024, 768) 786432] [(0, 0, 1280, 1024) 1310720] 
[(0, 0, 1600, 1200) 1920000] [(0, 0, 1920, 1080) 2073600] 

vec3 (after ranges::copy_if):
[(0, 0, 1024, 768) 786432] [(0, 0, 1280, 1024) 1310720] 
[(0, 0, 1600, 1200) 1920000] [(0, 0, 1920, 1080) 2073600] 

----- Ch10_03_ex3() -----

vec1 (orginal values):
[(0, 0, 640, 480) 307200] [(0, 0, 800, 600) 480000] 
[(0, 0, 1024, 768) 786432] [(0, 0, 1280, 1024) 1310720] 
[(0, 0, 1600, 1200) 1920000] [(0, 0, 1920, 1080) 2073600] 
[(0, 0, 3840, 2160) 8294400] [(0, 0, 7680, 4320) 33177600] 

num_elem = 6

vec2 (after copy_n):
[(0, 0, 800, 600) 480000] [(0, 0, 1024, 768) 786432] 
[(0, 0, 1280, 1024) 1310720] [(0, 0, 1600, 1200) 1920000] 
[(0, 0, 1920, 1080) 2073600] [(0, 0, 3840, 2160) 8294400] 

vec3 (after ranges::copy_n):
[(0, 0, 800, 600) 480000] [(0, 0, 1024, 768) 786432] 
[(0, 0, 1280, 1024) 1310720] [(0, 0, 1600, 1200) 1920000] 
[(0, 0, 1920, 1080) 2073600] [(0, 0, 3840, 2160) 8294400] 

----- Results for example Ch10_04 -----

----- Ch10_04_ex1() -----

Image::~Image() [ 7680  4320 33177600 0x0000020DB0911060]
Image::~Image() [ 3840  2160  8294400 0x0000020DB0120060]
Image::~Image() [ 1920  1080  2073600 0x0000020DAFF23060]
Image::~Image() [ 1600  1200  1920000 0x0000020DAFD3D060]
Image::~Image() [ 1280  1024  1310720 0x0000020DAFBEC060]
Image::~Image() [ 1024   768   786432 0x0000020DAFAE00A0]
Image::~Image() [  800   600   480000 0x0000020DAFA46020]
Image::~Image() [  640   480   307200 0x0000020DAF9FAFE0]

vec1 (initial values):
[  640   480   307200 0x0000020DB28C00A0] 
[  800   600   480000 0x0000020DB290B0C0] 
[ 1024   768   786432 0x0000020DB2980400] 
[ 1280  1024  1310720 0x0000020DB2AC2060] 
[ 1600  1200  1920000 0x0000020DB2C17060] 
[ 1920  1080  2073600 0x0000020DB2DF9060] 
[ 3840  2160  8294400 0x0000020DB3001060] 
[ 7680  4320 33177600 0x0000020DB37FC060] 

vec2 (initial values):
[  640   480   307200 0x0000020DB28C00A0] 
[  800   600   480000 0x0000020DB290B0C0] 
[ 1024   768   786432 0x0000020DB2980400] 
[ 1280  1024  1310720 0x0000020DB2AC2060] 
[ 1600  1200  1920000 0x0000020DB2C17060] 
[ 1920  1080  2073600 0x0000020DB2DF9060] 
[ 3840  2160  8294400 0x0000020DB3001060] 
[ 7680  4320 33177600 0x0000020DB37FC060] 
Image::~Image() [    0     0        0 0x0000000000000000]
Image::~Image() [    0     0        0 0x0000000000000000]
Image::~Image() [    0     0        0 0x0000000000000000]
Image::~Image() [    0     0        0 0x0000000000000000]
Image::~Image() [    0     0        0 0x0000000000000000]
Image::~Image() [    0     0        0 0x0000000000000000]
Image::~Image() [    0     0        0 0x0000000000000000]
Image::~Image() [    0     0        0 0x0000000000000000]
Image::~Image() [    0     0        0 0x0000000000000000]
Image::~Image() [    0     0        0 0x0000000000000000]
Image::~Image() [    0     0        0 0x0000000000000000]
Image::~Image() [    0     0        0 0x0000000000000000]
Image::~Image() [    0     0        0 0x0000000000000000]
Image::~Image() [    0     0        0 0x0000000000000000]
Image::~Image() [    0     0        0 0x0000000000000000]
Image::~Image() [    0     0        0 0x0000000000000000]

vec2 (after std::move):
[    0     0        0 0x0000000000000000] 
[    0     0        0 0x0000000000000000] 
[    0     0        0 0x0000000000000000] 
[    0     0        0 0x0000000000000000] 
[    0     0        0 0x0000000000000000] 
[    0     0        0 0x0000000000000000] 
[    0     0        0 0x0000000000000000] 
[    0     0        0 0x0000000000000000] 

vec3 (after std::move):
[  640   480   307200 0x0000020DB28C00A0] 
[  800   600   480000 0x0000020DB290B0C0] 
[ 1024   768   786432 0x0000020DB2980400] 
[ 1280  1024  1310720 0x0000020DB2AC2060] 
[ 1600  1200  1920000 0x0000020DB2C17060] 
[ 1920  1080  2073600 0x0000020DB2DF9060] 
[ 3840  2160  8294400 0x0000020DB3001060] 
[ 7680  4320 33177600 0x0000020DB37FC060] 
Image::~Image() [  640   480   307200 0x0000020DB28C00A0]
Image::~Image() [  800   600   480000 0x0000020DB290B0C0]
Image::~Image() [ 1024   768   786432 0x0000020DB2980400]
Image::~Image() [ 1280  1024  1310720 0x0000020DB2AC2060]
Image::~Image() [ 1600  1200  1920000 0x0000020DB2C17060]
Image::~Image() [ 1920  1080  2073600 0x0000020DB2DF9060]
Image::~Image() [ 3840  2160  8294400 0x0000020DB3001060]
Image::~Image() [ 7680  4320 33177600 0x0000020DB37FC060]
Image::~Image() [    0     0        0 0x0000000000000000]
Image::~Image() [    0     0        0 0x0000000000000000]
Image::~Image() [    0     0        0 0x0000000000000000]
Image::~Image() [    0     0        0 0x0000000000000000]
Image::~Image() [    0     0        0 0x0000000000000000]
Image::~Image() [    0     0        0 0x0000000000000000]
Image::~Image() [    0     0        0 0x0000000000000000]
Image::~Image() [    0     0        0 0x0000000000000000]

----- Ch10_04_ex2() -----

Image::~Image() [   70    80     5600 0x0000020DAFAE00A0]
Image::~Image() [   50    60     3000 0x0000020DB28C0080]
Image::~Image() [   30    40     1200 0x0000020DAF9F8F00]
Image::~Image() [   10    20      200 0x0000020DAF9EDBA0]
Image::~Image() [  700   800   560000 0x0000020DAF9FAFE0]
Image::~Image() [  500   600   300000 0x0000020DAFB06080]
Image::~Image() [  300   400   120000 0x0000020DAFAE8B80]
Image::~Image() [  100   200    20000 0x0000020DAFAE3D40]
Image::~Image() [ 7000  8000 56000000 0x0000020DB2ACF060]
Image::~Image() [ 5000  6000 30000000 0x0000020DB0961060]
Image::~Image() [ 3000  4000 12000000 0x0000020DAFDE5060]
Image::~Image() [ 1000  2000  2000000 0x0000020DAFBED060]

Before std::swap_ranges

vec1:
[   10    20      200 0x0000020DAF9F5D70] 
[   30    40     1200 0x0000020DAFAE1690] 
[   50    60     3000 0x0000020DAFAE1B50] 
[   70    80     5600 0x0000020DAFAE2720] 

vec2:
[  100   200    20000 0x0000020DAFA83BA0] 
[  300   400   120000 0x0000020DAFA889E0] 
[  500   600   300000 0x0000020DAFB4F480] 
[  700   800   560000 0x0000020DB28C00A0] 

vec3:
[ 1000  2000  2000000 0x0000020DB260E060] 
[ 3000  4000 12000000 0x0000020DB6045060] 
[ 5000  6000 30000000 0x0000020DB6BCE060] 
[ 7000  8000 56000000 0x0000020DB8872060] 
Image::~Image() [    0     0        0 0x0000000000000000]
Image::~Image() [    0     0        0 0x0000000000000000]
Image::~Image() [    0     0        0 0x0000000000000000]
Image::~Image() [    0     0        0 0x0000000000000000]

After std::swap_ranges

vec1:
[  100   200    20000 0x0000020DAFA83BA0] 
[  300   400   120000 0x0000020DAFA889E0] 
[  500   600   300000 0x0000020DAFB4F480] 
[  700   800   560000 0x0000020DB28C00A0] 

vec2:
[   10    20      200 0x0000020DAF9F5D70] 
[   30    40     1200 0x0000020DAFAE1690] 
[   50    60     3000 0x0000020DAFAE1B50] 
[   70    80     5600 0x0000020DAFAE2720] 

vec3:
[ 1000  2000  2000000 0x0000020DB260E060] 
[ 3000  4000 12000000 0x0000020DB6045060] 
[ 5000  6000 30000000 0x0000020DB6BCE060] 
[ 7000  8000 56000000 0x0000020DB8872060] 
Image::~Image() [    0     0        0 0x0000000000000000]
Image::~Image() [    0     0        0 0x0000000000000000]
Image::~Image() [    0     0        0 0x0000000000000000]
Image::~Image() [    0     0        0 0x0000000000000000]

After std::ranges::swap_ranges

vec1:
[ 1000  2000  2000000 0x0000020DB260E060] 
[ 3000  4000 12000000 0x0000020DB6045060] 
[ 5000  6000 30000000 0x0000020DB6BCE060] 
[ 7000  8000 56000000 0x0000020DB8872060] 

vec2:
[   10    20      200 0x0000020DAF9F5D70] 
[   30    40     1200 0x0000020DAFAE1690] 
[   50    60     3000 0x0000020DAFAE1B50] 
[   70    80     5600 0x0000020DAFAE2720] 

vec3:
[  100   200    20000 0x0000020DAFA83BA0] 
[  300   400   120000 0x0000020DAFA889E0] 
[  500   600   300000 0x0000020DAFB4F480] 
[  700   800   560000 0x0000020DB28C00A0] 
Image::~Image() [  100   200    20000 0x0000020DAFA83BA0]
Image::~Image() [  300   400   120000 0x0000020DAFA889E0]
Image::~Image() [  500   600   300000 0x0000020DAFB4F480]
Image::~Image() [  700   800   560000 0x0000020DB28C00A0]
Image::~Image() [   10    20      200 0x0000020DAF9F5D70]
Image::~Image() [   30    40     1200 0x0000020DAFAE1690]
Image::~Image() [   50    60     3000 0x0000020DAFAE1B50]
Image::~Image() [   70    80     5600 0x0000020DAFAE2720]
Image::~Image() [ 1000  2000  2000000 0x0000020DB260E060]
Image::~Image() [ 3000  4000 12000000 0x0000020DB6045060]
Image::~Image() [ 5000  6000 30000000 0x0000020DB6BCE060]
Image::~Image() [ 7000  8000 56000000 0x0000020DB8872060]

----- Results for example Ch10_05 -----

----- Ch10_05_ex1() -----

deq1 (initial values):
one two three four five six seven eight nine ten eleven twelve 

deq1 (after std::reverse):
twelve eleven ten nine eight seven six five four three two one 

deq2 (initial values):
one two three four five six seven eight nine ten eleven twelve 

deq2 (after std::ranges::reverse):
twelve eleven ten nine eight seven six five four three two one 

----- Ch10_05_ex2() -----

deq1 (initial values):
one two three four five six seven eight nine ten eleven twelve 

deq2 (after std::reverse_copy):
twelve eleven ten nine eight seven six five four three two one 

deq3 (after std::ranges::reverse_copy):
twelve eleven ten nine eight seven six five four three two one 

----- Results for example Ch10_06 -----

----- Ch10_06_ex1() -----

deq1 (initial values):
one      two      three    four     five     six      
seven    eight    nine     ten      eleven   twelve   

deq1 (after std::replace):
one      two      three    four     5        six      
seven    eight    nine     ten      eleven   twelve   

deq2 (initial values):
ten      one      two      three    four     5        
six      seven    eight    nine     ten      eleven   
twelve   ten      

deq2 (after std::ranges::replace):
10       one      two      three    four     5        
six      seven    eight    nine     10       eleven   
twelve   10       

----- Ch10_06_ex2() -----

vec1 (initial values):
    0     1     2     3     4     5     6     7     8     9 
   10    11    12    13    14    15    16    17    18    19 
   20    21    22    23    24    25    26    27    28    29 
   30    31    32    33    34    35    36    37    38    39 

vec1 (after std::replace_if):
    0     1  -999  -999     4  -999     6  -999     8     9 
   10  -999    12  -999    14    15    16  -999    18  -999 
   20    21    22  -999    24    25    26    27    28  -999 
   30  -999    32    33    34    35    36  -999    38    39 

vec2 (initial values):
    0     1     2     3     4     5     6     7     8     9 
   10    11    12    13    14    15    16    17    18    19 
   20    21    22    23    24    25    26    27    28    29 
   30    31    32    33    34    35    36    37    38    39 

vec2 (after std::ranges::replace_if):
    0     1  -999  -999     4  -999     6  -999     8     9 
   10  -999    12  -999    14    15    16  -999    18  -999 
   20    21    22  -999    24    25    26    27    28  -999 
   30  -999    32    33    34    35    36  -999    38    39 

std::ranges::iota() requires C++23

----- Ch10_06_ex3() -----

deq1 (initial values):
one      two      three    four     five     six      
seven    eight    nine     ten      eleven   twelve   

deq2 (after std::replace_copy):
one      two      three    four     5        six      
seven    eight    nine     ten      eleven   twelve   

deq3 (after std::ranges::replace_copy):
one      two      three    four     5        six      
seven    eight    nine     ten      eleven   twelve   

----- Ch10_06_ex4() -----

vec1 (initial values):
    0     1     2     3     4     5     6     7     8     9 
   10    11    12    13    14    15    16    17    18    19 
   20    21    22    23    24    25    26    27    28    29 
   30    31    32    33    34    35    36    37    38    39 

vec2 (after std::ranges::replace_copy_if):
    0     1  -999  -999     4  -999     6  -999     8     9 
   10  -999    12  -999    14    15    16  -999    18  -999 
   20    21    22  -999    24    25    26    27    28  -999 
   30  -999    32    33    34    35    36  -999    38    39 

----- Results for example Ch10_07 -----

----- Ch10_07_ex1() -----


vec1 - before std::remove_if
   0    1    2    3    4    5    6    7    8    9   10   11   12   13   14 
  15   16   17   18   19   20   21   22   23   24   25   26   27   28   29 

vec1 - after ctr.erase
   0    1    4    6    8    9   10   12   14   15   16   18   20   21   22 
  24   25   26   27   28 
num_erased: 10

deq1 - before std::remove_if
  30   31   32   33   34   35   36   37   38   39   40   41   42   43   44 
  45   46   47   48   49   50   51   52   53   54   55   56   57   58   59 

deq1 - after ctr.erase
  30   32   33   34   35   36   38   39   40   42   44   45   46   48   49 
  50   51   52   54   55   56   57   58 
num_erased: 7

list1 - before std::remove_if
  60   61   62   63   64   65   66   67   68   69   70   71   72   73   74 
  75   76   77   78   79   80   81   82   83   84   85   86   87   88   89 

list1 - after ctr.erase
  60   62   63   64   65   66   68   69   70   72   74   75   76   77   78 
  80   81   82   84   85   86   87   88 
num_erased: 7

----- Ch10_07_ex2() -----


vec1 - before std::erase_if
   0    1    2    3    4    5    6    7    8    9   10   11   12   13   14 
  15   16   17   18   19   20   21   22   23   24   25   26   27   28   29 

vec1 - after std::erase_if
   0    1    4    6    8    9   10   12   14   15   16   18   20   21   22 
  24   25   26   27   28 
num_erased: 10

deq1 - before std::erase_if
  30   31   32   33   34   35   36   37   38   39   40   41   42   43   44 
  45   46   47   48   49   50   51   52   53   54   55   56   57   58   59 

deq1 - after std::erase_if
  30   32   33   34   35   36   38   39   40   42   44   45   46   48   49 
  50   51   52   54   55   56   57   58 
num_erased: 7

list1 - before std::erase_if
  60   61   62   63   64   65   66   67   68   69   70   71   72   73   74 
  75   76   77   78   79   80   81   82   83   84   85   86   87   88   89 

list1 - after std::erase_if
  60   62   63   64   65   66   68   69   70   72   74   75   76   77   78 
  80   81   82   84   85   86   87   88 
num_erased: 7

fw_list1 - before std::erase_if
  90   91   92   93   94   95   96   97   98   99  100  101  102  103  104 
 105  106  107  108  109  110  111  112  113  114  115  116  117  118  119 

fw_list1 - after std::erase_if
  90   91   92   93   94   95   96   98   99  100  102  104  105  106  108 
 110  111  112  114  115  116  117  118  119 
num_erased: 6

----- Results for example Ch10_08 -----

----- Ch10_08_ex1() -----

vec1 (initial values):
   0    0    0    0    0    0    0    0    0    0 

vec1 (after std::fill):
  -1   -1   -1   -1   -1   -1   -1   -1   -1   -1 

vec2 (initial values):
   0    0    0    0    0    0    0    0    0    0 

vec1 (after std::ranges::fill):
  -2   -2   -2   -2   -2   -2   -2   -2   -2   -2 

----- Ch10_08_ex2() -----

vec1 (initial values):
[(0, 0, 640, 480) 307200] [(0, 0, 800, 600) 480000] 
[(0, 0, 1024, 768) 786432] [(0, 0, 1280, 1024) 1310720] 
[(0, 0, 1600, 1200) 1920000] [(0, 0, 1920, 1080) 2073600] 
[(0, 0, 3840, 2160) 8294400] [(0, 0, 7680, 4320) 33177600] 

vec1 (after std::fill):
[(0, 0, 96, 72) 6912] [(0, 0, 96, 72) 6912] 
[(0, 0, 96, 72) 6912] [(0, 0, 96, 72) 6912] 
[(0, 0, 96, 72) 6912] [(0, 0, 96, 72) 6912] 
[(0, 0, 96, 72) 6912] [(0, 0, 96, 72) 6912] 

vec2 (initial values):
[(0, 0, 640, 480) 307200] [(0, 0, 800, 600) 480000] 
[(0, 0, 1024, 768) 786432] [(0, 0, 1280, 1024) 1310720] 
[(0, 0, 1600, 1200) 1920000] [(0, 0, 1920, 1080) 2073600] 
[(0, 0, 3840, 2160) 8294400] [(0, 0, 7680, 4320) 33177600] 

vec2 (after std::fill):
[(0, 0, 96, 72) 6912] [(0, 0, 96, 72) 6912] 
[(0, 0, 96, 72) 6912] [(0, 0, 96, 72) 6912] 
[(0, 0, 96, 72) 6912] [(0, 0, 96, 72) 6912] 
[(0, 0, 96, 72) 6912] [(0, 0, 96, 72) 6912] 

----- Ch10_08_ex3() -----

vec1 (initial values):
[(0, 0, 640, 480) 307200] [(0, 0, 800, 600) 480000] 
[(0, 0, 1024, 768) 786432] [(0, 0, 1280, 1024) 1310720] 
[(0, 0, 1600, 1200) 1920000] [(0, 0, 1920, 1080) 2073600] 
[(0, 0, 3840, 2160) 8294400] [(0, 0, 7680, 4320) 33177600] 

num_elem = 6

vec1 (after std::fill_n):
[(0, 0, 640, 480) 307200] [(10, 20, 30, 40) 1200] 
[(10, 20, 30, 40) 1200] [(10, 20, 30, 40) 1200] 
[(10, 20, 30, 40) 1200] [(10, 20, 30, 40) 1200] 
[(10, 20, 30, 40) 1200] [(0, 0, 7680, 4320) 33177600] 
